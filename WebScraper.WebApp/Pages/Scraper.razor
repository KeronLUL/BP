@page "/"
@page "/scraper"
@using Newtonsoft.Json

<style>
    .container {
        display: flex;
        justify-content: flex-start;
        align-items: center;
        flex-wrap: wrap;
        text-align: center;
        margin-left: 15px;
    }    
    
    .btn-container {
        display: flex;
        justify-content: flex-end;
        align-items: flex-end;
        flex-wrap: wrap;
        text-align: center;
    }

    .btn-container button {
        margin: 0 5px;
    }
</style>

@if (showAlert)
{
    <MudAlert Variant="Variant.Filled" Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="CloseMe">@alertText</MudAlert>
}
@if (showAlertSucc)
{
    <MudAlert Variant="Variant.Filled" Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true" CloseIconClicked="CloseMeSuccess">Configuration file uploaded to server</MudAlert>
}
<MudPaper>
    <MudToolBar>
        <MudText Class="mt-3" Typo="Typo.h3">WebScraper</MudText>
        <MudSpacer />
        <div class="btn-container">
            <MudFileUpload T="IBrowserFile" FilesChanged="UploadConfig">
                <ButtonTemplate Context="fileContext">
                    <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" for="@fileContext" StartIcon="@Icons.Material.Filled.Upload">Upload config</MudButton>
                </ButtonTemplate>
            </MudFileUpload>
        </div>
    </MudToolBar>
    <MudText Class="ml-3 mt-3" Typo="Typo.h6">Configuration file:</MudText>
    <MudSelect Class="ml-3 mb-3 mr-3" T="string" Placeholder="Select config file..." Variant="Variant.Outlined" Value="@path"  ValueChanged="SelectionChanged" AnchorOrigin="Origin.BottomCenter">
        @foreach (var file in configFiles)
        {
            <MudSelectItem Value="@file">@file</MudSelectItem>
        }
    </MudSelect>
    
    <div style="display: flex; margin-left: 5px">
        <MudCheckBox @bind-Checked="@headless" Color="Color.Primary">Headless mode</MudCheckBox>
        <MudCheckBox @bind-Checked="@maximized" Color="Color.Primary">Maximized (Chrome driver only)</MudCheckBox>
    </div>

    <div style="display: flex;">
        <MudButton Variant="Variant.Filled" Class="ml-3 mb-3 mt-3" StartIcon="@Icons.Material.Filled.PlayArrow" Color="Color.Primary" OnClick="Run">Run</MudButton>
        @* <MudButton Variant="Variant.Filled" Class="ml-3 mb-3 mt-3" StartIcon="@Icons.Material.Filled.Stop" Color="Color.Error" OnClick="Stop">Stop</MudButton> *@
        @switch (status)
        {
            case TaskStatus.RanToCompletion:
                if (Environment.ExitCode == 0)
                {
                    <MudText Class="container" Color="@Color.Success">WebScraper finished</MudText>
                }
                else
                {
                    <MudText Class="container" Color="@Color.Error">WebScraper finished with error</MudText>
                }
                break;
            case TaskStatus.Canceled:
                <MudText Class="container" Color="@Color.Success">WebScraper stopped</MudText>
                break;
            case TaskStatus.Running:
                <MudText Class="container">WebScraper is running...</MudText>
                break;    
            default:
            {
                <MudText Class="container">WebScraper hasn't started</MudText>
                break;
            }
        }

    </div>
</MudPaper>

@code{
    private List<string> configFiles = new ();
    private List<string> argumentList = new ();
    private string? path;
    private string? alertText;
    private bool isProcessRunning;
    private bool showAlert;
    private bool headless = true;
    private bool maximized;
    private bool showAlertSucc;
    private TaskStatus status;

    protected override void OnInitialized()
    {
        foreach (var file in Directory.GetFiles("../WebScraper/Configs"))
        {
            configFiles.Add(Path.GetFileName(file));
        }
    }
    
    private void CloseMeSuccess()
    {
        showAlertSucc = false;
    }

    private bool CheckConfig()
    {
        bool targetValue;
        try
        {
            var config = File.ReadAllText("../WebScraper/Configs/" + path);
            dynamic jsonObject = JsonConvert.DeserializeObject(config)!;
            targetValue = jsonObject["loop"];
        }
        catch (Exception)
        {
            alertText = "Cannot determine looping of WebScraper";
            return false;
        }

        if (!targetValue)
        {
            return true;
        }
        
        alertText = "For running WebScraper in a loop, please run it from command line";
        return false;
    }
    
    private void SelectionChanged(string value)
    {
        path = value;
        StateHasChanged();
    }

    private async Task Run()
    {
        if (path == null)
        {
            alertText = "Configuration file must be specified!";
            showAlert = true;
            return;
        }
        if (!CheckConfig())
        {
            showAlert = true;
            return;
        }
        
        argumentList.Add("-f" );
        argumentList.Add("../WebScraper/Configs/" + path);
        if(headless) argumentList.Add("-h" );
        if(maximized) argumentList.Add("-m" );
        
        var arguments = argumentList.ToArray();
        
        if (!isProcessRunning)
        {
            isProcessRunning = true;

            var scraper = Task.Run(async () =>
            {
                await Program.Main(arguments);
                
            });
            
            while (scraper.Status != TaskStatus.RanToCompletion && scraper.Status != TaskStatus.Faulted)
            {
                status = TaskStatus.Running;
                await Task.Delay(1000);
            }

            status = scraper.Status;
            isProcessRunning = false;
        }
        
        argumentList.Clear();
        Array.Clear(arguments);
        StateHasChanged();
    }

    private async Task UploadConfig(IBrowserFile file)
    {
        try
        {
            var fileStream = file.OpenReadStream();

            using var streamReader = new StreamReader(fileStream);
            var fileContent = await streamReader.ReadToEndAsync();
            
            await using var sw = File.CreateText("../WebScraper/Configs/" + file.Name);
            await sw.WriteAsync(fileContent);
        }
        catch (Exception)
        {
            alertText = "Failed to upload config file";
            showAlert = true;
        }

        showAlertSucc = true;
        
        configFiles.Clear();
        foreach (var config in Directory.GetFiles("../WebScraper/Configs"))
        {
            configFiles.Add(Path.GetFileName(config));
        }
    }
    
    private void CloseMe()
    {
        showAlert = false;
    }
}