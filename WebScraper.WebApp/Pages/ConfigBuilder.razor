@page "/config"
@using System.Reflection
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components
@using MudBlazor.Utilities
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using WebScraper.WebApp.Models
@using WebScraper.Json.Entities

@inject IJSRuntime JsRuntime

<h3>Configuration file builder</h3>

<style>
    h3 {
        font-weight: bold;
        text-align: center;
        margin-top: 20px;
        margin-bottom: 30px;
    }

    form {
        background-color: #f7f7f7;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 20px;
    }
    
    .form-group .form-group-property {
        margin-top: 10px;
        margin-bottom: 10px;
        margin-left: 75px;
    }
    
    .form-group .form-group-property label {
            margin-top: 5px;
        }

    label {
        font-weight: bold;
        margin-bottom: 5px;
        margin-left: 5px;
    }

    .form-control {
        border-radius: 3px;
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
    }
    
    .form-control select {
        padding: 10px;
        border-radius: 3px;
        border: 1px solid #ccc;
        width: 100%;
        height: 40px;
     }

    .btn-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
        flex-wrap: wrap;
        text-align: center;
    }

    .btn-container button {
        margin: 0 5px;
    }
</style>

<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <div class="form-group">
        <label for="configName">Configuration file name (Optional)</label>
        <input type="text" id="configName" class="form-control" @bind="@ConfigName"/>
    </div>
    
    <div class="form-group">
        <label for="url">URL</label>
        <input type="text" id="url" class="form-control" @bind="@config.Url"/>
    </div>
    
    <div class="form-group">
        <label for="loop">Loop</label>
        <input type="checkbox" id="loop" class="form-check-input" @bind="@config.Loop"/>
    </div>
    
    <div class="form-group">
        <label for="waitTime">Wait Time</label>
        <input type="number" min="0" id="waitTime" class="form-control" @bind="@config.WaitTime"/>
    </div>
    
    <div class="form-group">
    <label for="driver">Driver</label>
    <select class="form-control" id="driver" @bind="@config.Driver">
        <option value="">Select an option...</option>
        <option value="Firefox">Firefox</option>
        <option value="Chrome">Chrome</option>
        <option value="Safari">Safari</option>
    </select>
    </div>

    <MudDropContainer T="CommandField" Items="@commandFields" @ref="_container" ItemsSelector="@((item,dropzone) => item.Selector == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
    		<ChildContent>
    
    				<MudPaper Class="ma-4 flex-grow-1">
    					<MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                            <MudDropZone T="CommandField" Identifier="1" Class="flex-grow-1" AllowReorder="true" />
    					</MudList>
    				</MudPaper>
            </ChildContent>
    		<ItemRenderer Context="itemContext">
    			<MudListItem Text="@($"{itemContext.Name} ({itemContext.Order})")" />
    		</ItemRenderer>
    	</MudDropContainer>

    <div class="btn-container">
        <button type="button" class="btn btn-primary mt-3" @onclick="AddFormField">Add command</button>
        <button type="button" class="btn btn-primary mt-3">Save config</button>
    </div>
</EditForm>

@code {
    private string? ConfigName { get; set; }
    private MudDropContainer<CommandField> _container = new MudDropContainer<CommandField>();
    private List<CommandField> commandFields = new();
    private Config config = new();
    private EditContext? editContext;
    private ValidationMessageStore? validationMessageStore;

    protected override void OnInitialized()
    {
        editContext = new EditContext(this);
        validationMessageStore = new ValidationMessageStore(editContext);
        List<CommandField> newdata = new List<CommandField>();

        foreach (var item in _serverData.OrderBy(x => x.Order))
        {
            newdata.Add(item);
        }
        commandFields = newdata;
        RefreshContainer();
    }
    
    private List<CommandField> _serverData = new()
    {
        new CommandField() { Order = 0, Name = "Item 1", Selector = "1" },
        new CommandField() { Order = 1, Name = "Item 2", Selector = "1" },
        new CommandField() { Order = 2, Name = "Item 3", Selector = "1" },
        new CommandField() { Order = 3, Name = "Item 4", Selector = "1" },
        new CommandField() { Order = 4, Name = "Item 5", Selector = "1" },
        new CommandField() { Order = 5, Name = "Item 6", Selector = "1" },
        new CommandField() { Order = 6, Name = "Item 7", Selector = "1" },
        new CommandField() { Order = 7, Name = "Item 8", Selector = "1" },
        new CommandField() { Order = 8, Name = "Item 9", Selector = "1" },
        new CommandField() { Order = 9, Name = "Item 10", Selector = "1" },
    };
    
    private void ItemUpdated(MudItemDropInfo<CommandField> dropItem)
    {
        dropItem.Item!.Selector = dropItem.DropzoneIdentifier;

        var indexOffset = dropItem.DropzoneIdentifier switch
        {
            "2"  => _serverData.Count(x => x.Selector == "1"),
            _ => 0,
            };

        commandFields.UpdateOrder(dropItem, item => item.Order, indexOffset);
    }
    
    private void RefreshContainer()
    {
    //update the binding to the container
        StateHasChanged();

    //the container refreshes the internal state
        _container.Refresh();
    }


    private void AddFormField()
    {
        commandFields.Add(new CommandField { Order = commandFields.Count + 1, Name = "Test", Selector = "1"});
        RefreshContainer();
    }

    // private static void FillProperties(CommandField command)
    // {
    //     if (command.PropertyFields!.Count == 0)
    //     {
    //         foreach (var property in GetProperties(command.Name))
    //         {
    //             command.PropertyFields.Add( new PropertyField { Id = Guid.NewGuid().ToString(), Key = property.Name, Value = string.Empty });
    //         }
    //     }
    // }

    // private static void SelectionChanged(ChangeEventArgs e, CommandField command)
    // {
    //     command.Name = e.Value!.ToString()!;
    //     command.PropertyFields!.Clear();
    // }

    private static List<string> GetCommands()
    {
        return CommandServices.GetCommandsNames();
    }

    private static IEnumerable<PropertyInfo> GetProperties(string? name)
    {
        return CommandServices.GetProperties(name);
    }

    private bool Validate(CommandField command, PropertyField property)
    {
        if (string.IsNullOrWhiteSpace(property.Value))
        {
            if (property.Key == "Time")
            {
                validationMessageStore!.Add(editContext!.Field(property.Id!), $@"Field value of property {property.Key} of command {command.Name} must be valid number");
            }
            else
            {
                validationMessageStore!.Add(editContext!.Field(property.Id!), $@"Field value of property {property.Key} of command {command.Name} cannot be empty");
            }
            editContext.NotifyValidationStateChanged();
            return false;
        }
        if (property.Key == "Time")
        {
            if (!int.TryParse(property.Value, out var value))
            {
                validationMessageStore!.Add(editContext!.Field(property.Id!), $@"Field value of property {property.Key} of command {command.Name} must be a number");
                editContext.NotifyValidationStateChanged();
                return false;
            }

            if (value < 0)
            {
                validationMessageStore!.Add(editContext!.Field(property.Id!), $@"Field value of property {property.Key} of command {command.Name} must be a positive number");
                editContext.NotifyValidationStateChanged();
                return false;
            }
            
        }else if(property.Key is "Path" or "Attribute")
        {
            if (!Regex.IsMatch(property.Value, @"^(/?/?[\w-]+(:?/[\w-]+)*)*(\[@?\w+(\s*=\s*('.*?'|"".+?""|\w+))?\])*$"))
            {
                validationMessageStore!.Add(editContext!.Field(property.Id!), $@"Field value of property {property.Key} of command {command.Name} is not valid XPath");
                editContext.NotifyValidationStateChanged();
                return false;
            }
            
        }
        return true;
    }

    private bool ValidateUrl(string? url)
    {
        if(string.IsNullOrWhiteSpace(config.Url))
        {
            config.Url = string.Empty;
            validationMessageStore!.Add(editContext!.Field(config.Url!), $@"URL field cannot be empty");
            editContext.NotifyValidationStateChanged();
            return false;
        }
        if (!Regex.IsMatch(url!, @"^(https?://)?(www\.)?((localhost)|([a-zA-Z0-9]+[.-])+[a-zA-Z]{2,6})(:\d{1,5})?(/.*)?$"))
        {
            validationMessageStore!.Add(editContext!.Field(config.Url!), $@"{config.Url} is not valid URL");
            editContext.NotifyValidationStateChanged();
            return false;
        }
        return true;
    }

    // private void HandleValidSubmit()
    // {
    //     validationMessageStore!.Clear();
    //     editContext!.NotifyValidationStateChanged();
    //
    //     if (!ValidateUrl(config.Url!)) return;
    //
    //     config.Commands = new List<CommandConfig>();
    //     foreach (var command in commandFields)
    //     {
    //         config.Commands.Add(new CommandConfig() { Name = command.Name, Args = new Dictionary<string, object>()});
    //         foreach (var property in command.PropertyFields!)
    //         {
    //             if (!Validate(command, property))
    //             {
    //                 config.Commands.Clear();
    //                 return;
    //             }
    //             if (property.Key == "Time")
    //             {
    //                 int.TryParse(property.Value, out var value);
    //                 config.Commands.Last().Args!.Add(property.Key!, value);
    //             }
    //             else
    //             {
    //                 config.Commands.Last().Args!.Add(property.Key!, property.Value!);
    //             }
    //         }
    //     }
    //     DownloadFile();
    // }

    private async void DownloadFile()
    {
        var serializerSettings = new JsonSerializerSettings()
        {
            ContractResolver = new CamelCasePropertyNamesContractResolver(),
            Formatting = Formatting.Indented
        };
        
        await JsRuntime.InvokeAsync<object>("saveFile", ConfigName != null ? $"{ConfigName}.json" : "config.json", JsonConvert.SerializeObject(config, serializerSettings));
    }
}