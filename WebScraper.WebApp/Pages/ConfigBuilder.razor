@page "/config"
@using System.Reflection
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components
@using MudBlazor.Utilities
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@using WebScraper.WebApp.Models
@using WebScraper.Json.Entities

@inject IJSRuntime JsRuntime

<style>
    form {
        background-color: #f0f0f0;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        color: #424242;
    }

    .form-group .form-group-property {
        margin-top: 10px;
        margin-bottom: 10px;
        margin-left: 75px;
    }
    
    .form-group .form-group-property label {
            margin-top: 5px;
        }

    label {
        font-weight: bold;
        margin-bottom: 5px;
        margin-left: 5px;
    }

    .btn-container {
        display: flex;
        justify-content: flex-end;
        align-items: flex-end;
        flex-wrap: wrap;
        text-align: center;
    }

    .btn-container button {
        margin: 0 5px;
    }
    
    .btn-add {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-wrap: wrap;
        text-align: center;
    }
    
    .custom-label-container .mud-input-label {
        background-color: #f0f0f0;
    }
</style>

<EditForm EditContext="@editContext">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <MudToolBar>
        <MudText Typo="Typo.h4">Configuration file builder</MudText>
        <MudSpacer />
        <div class="btn-container">
            <MudFileUpload T="IBrowserFile" FilesChanged="LoadConfig">
                <ButtonTemplate Context="fileContext">
                    <MudButton HtmlTag="label" Variant="Variant.Filled" Color="Color.Primary" for="@fileContext" StartIcon="@Icons.Material.Filled.Upload">Upload config</MudButton>
                </ButtonTemplate>
            </MudFileUpload>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary" OnClick="HandleValidSubmit">Save config</MudButton>
        </div>
    </MudToolBar>
    
    <MudItem>
        <div class="custom-label-container">
            <MudTextField Variant="Variant.Outlined" Label="Configuration file name (Optional)" LabelClass="custom-label" @bind-Value="@ConfigName"></MudTextField>
            <MudTextField Variant="Variant.Outlined" Class="mt-2" Label="URL" @bind-Value="@config.Url"></MudTextField>
            <MudCheckBox Label="Loop" Color="Color.Primary" @bind-Checked="@config.Loop"></MudCheckBox>
            <MudNumericField @bind-Value="@config.WaitTime" Label="Wait Time" Min="0" Variant="Variant.Outlined"/>
            <MudSelect Placeholder="Select driver..." Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="@config.Driver">
                <MudSelectItem Value="@("Firefox")">Firefox</MudSelectItem>
                <MudSelectItem Value="@("Chrome")">Chrome</MudSelectItem>
                <MudSelectItem Value="@("Safari")">Safari</MudSelectItem>
            </MudSelect>
        </div>
    </MudItem>

    <MudItem>
        @if (commandFields.Count > 0)
        {
            <MudDropContainer T="CommandField" Items="@commandFields" @ref="_container" ItemsSelector="@((item, dropzone) => item.Selector == dropzone)" ItemDropped="ItemUpdated" Class="rounded d-flex flex-wrap flex-grow-1">
                <ChildContent>
                    <MudPaper Class="ma-4 flex-grow-1">
                        <MudList Clickable="true" Class="d-flex flex-column mud-height-full">
                            <MudDropZone T="CommandField" Identifier="1" Class="flex-grow-1 rounded" AllowReorder="true"/>
                        </MudList>
                    </MudPaper>
                </ChildContent>
                <ItemRenderer Context="command">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="cmd => DeleteCommand(command)"></MudIconButton>
                    <MudSelect T="string" Placeholder="Select command..." Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Value="@command.Name" ValueChanged="value => SelectionChanged(value, command)">
                        @foreach (var cmd in GetCommands())
                        {
                            <MudSelectItem Value="@cmd">@cmd</MudSelectItem>
                        }

                    </MudSelect>
                    @{
                        FillProperties(command);
                    }
                    @foreach (var property in command.PropertyFields!)
                    {
                        <MudTextField class="ml-15 mt-2" Variant="Variant.Outlined" @bind-Value="@property.Value" Label="@property.Key"></MudTextField>
                    }
                </ItemRenderer>
            </MudDropContainer>
        }
    </MudItem>
    <div class="btn-add">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="align-center mt-3" OnClick="AddFormField">Add command</MudButton>
    </div>
    
</EditForm>

@code {
    private string? ConfigName { get; set; }
    private MudDropContainer<CommandField> _container = new ();
    private List<CommandField> commandFields = new();
    private Config config = new();
    private EditContext? editContext;
    private ValidationMessageStore? validationMessageStore;
    private int commandOrder = 1;

    protected override void OnInitialized()
    {
        editContext = new EditContext(this);
        validationMessageStore = new ValidationMessageStore(editContext);
    }

    private List<CommandField> _serverData = new();
    
    private void ItemUpdated(MudItemDropInfo<CommandField> dropItem)
    {
        dropItem.Item!.Selector = dropItem.DropzoneIdentifier;

        var indexOffset = dropItem.DropzoneIdentifier switch
        {
            "2"  => _serverData.Count(x => x.Selector == "1"),
            _ => 0,
            };

        commandFields.UpdateOrder(dropItem, item => item.Order, indexOffset);
    }
    
    private void RefreshContainer()
    {
        StateHasChanged();
        _container.Refresh();
    }

    private void DeleteCommand(CommandField command)
    {
        commandFields.RemoveAll(cmd => cmd.Order == command.Order);
        RefreshContainer();
    }
    
    private void AddFormField()
    {
        commandFields.Add(new CommandField { Order = commandOrder, Name = string.Empty, Selector = "1", PropertyFields = new List<PropertyField>()});
        commandOrder++;
        RefreshContainer();
    }

    private static void FillProperties(CommandField command)
    {
        if (command.PropertyFields!.Count == 0)
        {
            foreach (var property in GetProperties(command.Name))
            {
                command.PropertyFields.Add( new PropertyField { Id = Guid.NewGuid().ToString(), Key = property.Name, Value = string.Empty });
            }
        }
    }

    private void SelectionChanged(string value, CommandField command)
    {
        command.Name = value;
        command.PropertyFields!.Clear();
        RefreshContainer();
    }

    private static List<string> GetCommands()
    {
        return CommandServices.GetCommandsNames();
    }

    private static IEnumerable<PropertyInfo> GetProperties(string? name)
    {
        return CommandServices.GetProperties(name);
    }

    private bool Validate(CommandField command, PropertyField property)
    {
        if (string.IsNullOrWhiteSpace(property.Value))
        {
            if (property.Key == "Time")
            {
                validationMessageStore!.Add(editContext!.Field(property.Id!), $@"Field value of property {property.Key} of command {command.Name} must be valid number");
            }
            else
            {
                validationMessageStore!.Add(editContext!.Field(property.Id!), $@"Field value of property {property.Key} of command {command.Name} cannot be empty");
            }
            editContext.NotifyValidationStateChanged();
            return false;
        }
        if (property.Key == "Time")
        {
            if (!int.TryParse(property.Value, out var value))
            {
                validationMessageStore!.Add(editContext!.Field(property.Id!), $@"Field value of property {property.Key} of command {command.Name} must be a number");
                editContext.NotifyValidationStateChanged();
                return false;
            }

            if (value < 0)
            {
                validationMessageStore!.Add(editContext!.Field(property.Id!), $@"Field value of property {property.Key} of command {command.Name} must be a positive number");
                editContext.NotifyValidationStateChanged();
                return false;
            }
            
        }else if(property.Key is "Path" or "Attribute")
        {
            if (!Regex.IsMatch(property.Value, @"^(/?/?[\w-]+(:?/[\w-]+)*)*(\[@?\w+(\s*=\s*('.*?'|"".+?""|\w+))?\])*$"))
            {
                validationMessageStore!.Add(editContext!.Field(property.Id!), $@"Field value of property {property.Key} of command {command.Name} is not valid XPath");
                editContext.NotifyValidationStateChanged();
                return false;
            }
            
        }
        return true;
    }

    private bool ValidateUrl(string? url)
    {
        if(string.IsNullOrWhiteSpace(config.Url))
        {
            config.Url = string.Empty;
            validationMessageStore!.Add(editContext!.Field(config.Url!), $@"URL field cannot be empty");
            editContext.NotifyValidationStateChanged();
            return false;
        }
        if (!Regex.IsMatch(url!, @"^(https?://)?(www\.)?((localhost)|([a-zA-Z0-9]+[.-])+[a-zA-Z]{2,6})(:\d{1,5})?(/.*)?$"))
        {
            validationMessageStore!.Add(editContext!.Field(config.Url!), $@"{config.Url} is not valid URL");
            editContext.NotifyValidationStateChanged();
            return false;
        }
        return true;
    }

    private void HandleValidSubmit()
    {
        validationMessageStore!.Clear();
        editContext!.NotifyValidationStateChanged();
    
        if (!ValidateUrl(config.Url!)) return;
    
        config.Commands = new List<CommandConfig>();
        foreach (var command in commandFields.OrderBy(o => o.Order))
        {
            //empty command
            config.Commands.Add(new CommandConfig() { Name = command.Name, Args = new Dictionary<string, object>()});
            foreach (var property in command.PropertyFields!)
            {
                if (!Validate(command, property))
                {
                    config.Commands.Clear();
                    return;
                }
                if (property.Key == "Time")
                {
                    int.TryParse(property.Value, out var value);
                    config.Commands.Last().Args!.Add(property.Key!, value);
                }
                else
                {
                    config.Commands.Last().Args!.Add(property.Key!, property.Value!);
                }
            }
        }
        DownloadFile();
    }

    private async void DownloadFile()
    {
        var serializerSettings = new JsonSerializerSettings()
        {
            ContractResolver = new CamelCasePropertyNamesContractResolver(),
            Formatting = Formatting.Indented
        };
        
        await JsRuntime.InvokeAsync<object>("saveFile", ConfigName is not (null or "") ? $"{ConfigName}.json" : "config.json", JsonConvert.SerializeObject(config, serializerSettings));
    }
    
    private async Task LoadConfig(IBrowserFile file)
    {
        try
        {
            var fileStream = file.OpenReadStream();

            using var streamReader = new StreamReader(fileStream);
            var fileContent = await streamReader.ReadToEndAsync();
            var uploadedConfig = JsonConvert.DeserializeObject<Config>(fileContent);
            config.Url = uploadedConfig.Url;
        }
        catch (Exception ex)
        {
        }
    }
}